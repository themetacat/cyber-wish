// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct WisherCycleRecordsData {
  uint256 wishCount;
  uint256 points;
  uint256 boostedPointsAmount;
  uint256 boostedStarAmount;
}

library WisherCycleRecords {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "cyberwish", name: "WisherCycleRecor", typeId: RESOURCE_OFFCHAIN_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x6f7463796265727769736800000000005769736865724379636c655265636f72);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0080040020202020000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32, uint256, address)
  Schema constant _keySchema = Schema.wrap(0x005403005f1f6100000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256, uint256, uint256, uint256)
  Schema constant _valueSchema = Schema.wrap(0x008004001f1f1f1f000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](3);
    keyNames[0] = "poolId";
    keyNames[1] = "cycle";
    keyNames[2] = "wisher";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](4);
    fieldNames[0] = "wishCount";
    fieldNames[1] = "points";
    fieldNames[2] = "boostedPointsAmount";
    fieldNames[3] = "boostedStarAmount";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Set wishCount.
   */
  function setWishCount(bytes32 poolId, uint256 cycle, address wisher, uint256 wishCount) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));
    _keyTuple[2] = bytes32(uint256(uint160(wisher)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((wishCount)), _fieldLayout);
  }

  /**
   * @notice Set wishCount.
   */
  function _setWishCount(bytes32 poolId, uint256 cycle, address wisher, uint256 wishCount) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));
    _keyTuple[2] = bytes32(uint256(uint160(wisher)));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((wishCount)), _fieldLayout);
  }

  /**
   * @notice Set points.
   */
  function setPoints(bytes32 poolId, uint256 cycle, address wisher, uint256 points) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));
    _keyTuple[2] = bytes32(uint256(uint160(wisher)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((points)), _fieldLayout);
  }

  /**
   * @notice Set points.
   */
  function _setPoints(bytes32 poolId, uint256 cycle, address wisher, uint256 points) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));
    _keyTuple[2] = bytes32(uint256(uint160(wisher)));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((points)), _fieldLayout);
  }

  /**
   * @notice Set boostedPointsAmount.
   */
  function setBoostedPointsAmount(bytes32 poolId, uint256 cycle, address wisher, uint256 boostedPointsAmount) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));
    _keyTuple[2] = bytes32(uint256(uint160(wisher)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((boostedPointsAmount)), _fieldLayout);
  }

  /**
   * @notice Set boostedPointsAmount.
   */
  function _setBoostedPointsAmount(
    bytes32 poolId,
    uint256 cycle,
    address wisher,
    uint256 boostedPointsAmount
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));
    _keyTuple[2] = bytes32(uint256(uint160(wisher)));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((boostedPointsAmount)), _fieldLayout);
  }

  /**
   * @notice Set boostedStarAmount.
   */
  function setBoostedStarAmount(bytes32 poolId, uint256 cycle, address wisher, uint256 boostedStarAmount) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));
    _keyTuple[2] = bytes32(uint256(uint160(wisher)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((boostedStarAmount)), _fieldLayout);
  }

  /**
   * @notice Set boostedStarAmount.
   */
  function _setBoostedStarAmount(bytes32 poolId, uint256 cycle, address wisher, uint256 boostedStarAmount) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));
    _keyTuple[2] = bytes32(uint256(uint160(wisher)));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((boostedStarAmount)), _fieldLayout);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 poolId,
    uint256 cycle,
    address wisher,
    uint256 wishCount,
    uint256 points,
    uint256 boostedPointsAmount,
    uint256 boostedStarAmount
  ) internal {
    bytes memory _staticData = encodeStatic(wishCount, points, boostedPointsAmount, boostedStarAmount);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));
    _keyTuple[2] = bytes32(uint256(uint160(wisher)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 poolId,
    uint256 cycle,
    address wisher,
    uint256 wishCount,
    uint256 points,
    uint256 boostedPointsAmount,
    uint256 boostedStarAmount
  ) internal {
    bytes memory _staticData = encodeStatic(wishCount, points, boostedPointsAmount, boostedStarAmount);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));
    _keyTuple[2] = bytes32(uint256(uint160(wisher)));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 poolId, uint256 cycle, address wisher, WisherCycleRecordsData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.wishCount,
      _table.points,
      _table.boostedPointsAmount,
      _table.boostedStarAmount
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));
    _keyTuple[2] = bytes32(uint256(uint160(wisher)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 poolId, uint256 cycle, address wisher, WisherCycleRecordsData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.wishCount,
      _table.points,
      _table.boostedPointsAmount,
      _table.boostedStarAmount
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));
    _keyTuple[2] = bytes32(uint256(uint160(wisher)));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (uint256 wishCount, uint256 points, uint256 boostedPointsAmount, uint256 boostedStarAmount) {
    wishCount = (uint256(Bytes.getBytes32(_blob, 0)));

    points = (uint256(Bytes.getBytes32(_blob, 32)));

    boostedPointsAmount = (uint256(Bytes.getBytes32(_blob, 64)));

    boostedStarAmount = (uint256(Bytes.getBytes32(_blob, 96)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (WisherCycleRecordsData memory _table) {
    (_table.wishCount, _table.points, _table.boostedPointsAmount, _table.boostedStarAmount) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 poolId, uint256 cycle, address wisher) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));
    _keyTuple[2] = bytes32(uint256(uint160(wisher)));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 poolId, uint256 cycle, address wisher) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));
    _keyTuple[2] = bytes32(uint256(uint160(wisher)));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint256 wishCount,
    uint256 points,
    uint256 boostedPointsAmount,
    uint256 boostedStarAmount
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(wishCount, points, boostedPointsAmount, boostedStarAmount);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 wishCount,
    uint256 points,
    uint256 boostedPointsAmount,
    uint256 boostedStarAmount
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(wishCount, points, boostedPointsAmount, boostedStarAmount);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 poolId, uint256 cycle, address wisher) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));
    _keyTuple[2] = bytes32(uint256(uint160(wisher)));

    return _keyTuple;
  }
}

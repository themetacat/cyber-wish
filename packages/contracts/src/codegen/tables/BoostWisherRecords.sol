// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct BoostWisherRecordsData {
  uint256 amount;
  uint256 amountPoints;
  uint256 amountStar;
  address[] boostedWisherByPoints;
  address[] boostedWisherByStar;
}

library BoostWisherRecords {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "cyberwish", name: "BoostWisherRecor", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x74626379626572776973680000000000426f6f73745769736865725265636f72);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0060030220202000000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32, uint256)
  Schema constant _keySchema = Schema.wrap(0x004002005f1f0000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256, uint256, uint256, address[], address[])
  Schema constant _valueSchema = Schema.wrap(0x006003021f1f1fc3c30000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](2);
    keyNames[0] = "poolId";
    keyNames[1] = "cycle";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](5);
    fieldNames[0] = "amount";
    fieldNames[1] = "amountPoints";
    fieldNames[2] = "amountStar";
    fieldNames[3] = "boostedWisherByPoints";
    fieldNames[4] = "boostedWisherByStar";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get amount.
   */
  function getAmount(bytes32 poolId, uint256 cycle) internal view returns (uint256 amount) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get amount.
   */
  function _getAmount(bytes32 poolId, uint256 cycle) internal view returns (uint256 amount) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set amount.
   */
  function setAmount(bytes32 poolId, uint256 cycle, uint256 amount) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((amount)), _fieldLayout);
  }

  /**
   * @notice Set amount.
   */
  function _setAmount(bytes32 poolId, uint256 cycle, uint256 amount) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((amount)), _fieldLayout);
  }

  /**
   * @notice Get amountPoints.
   */
  function getAmountPoints(bytes32 poolId, uint256 cycle) internal view returns (uint256 amountPoints) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get amountPoints.
   */
  function _getAmountPoints(bytes32 poolId, uint256 cycle) internal view returns (uint256 amountPoints) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set amountPoints.
   */
  function setAmountPoints(bytes32 poolId, uint256 cycle, uint256 amountPoints) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((amountPoints)), _fieldLayout);
  }

  /**
   * @notice Set amountPoints.
   */
  function _setAmountPoints(bytes32 poolId, uint256 cycle, uint256 amountPoints) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((amountPoints)), _fieldLayout);
  }

  /**
   * @notice Get amountStar.
   */
  function getAmountStar(bytes32 poolId, uint256 cycle) internal view returns (uint256 amountStar) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get amountStar.
   */
  function _getAmountStar(bytes32 poolId, uint256 cycle) internal view returns (uint256 amountStar) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set amountStar.
   */
  function setAmountStar(bytes32 poolId, uint256 cycle, uint256 amountStar) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((amountStar)), _fieldLayout);
  }

  /**
   * @notice Set amountStar.
   */
  function _setAmountStar(bytes32 poolId, uint256 cycle, uint256 amountStar) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((amountStar)), _fieldLayout);
  }

  /**
   * @notice Get boostedWisherByPoints.
   */
  function getBoostedWisherByPoints(
    bytes32 poolId,
    uint256 cycle
  ) internal view returns (address[] memory boostedWisherByPoints) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_address());
  }

  /**
   * @notice Get boostedWisherByPoints.
   */
  function _getBoostedWisherByPoints(
    bytes32 poolId,
    uint256 cycle
  ) internal view returns (address[] memory boostedWisherByPoints) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_address());
  }

  /**
   * @notice Set boostedWisherByPoints.
   */
  function setBoostedWisherByPoints(bytes32 poolId, uint256 cycle, address[] memory boostedWisherByPoints) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((boostedWisherByPoints)));
  }

  /**
   * @notice Set boostedWisherByPoints.
   */
  function _setBoostedWisherByPoints(bytes32 poolId, uint256 cycle, address[] memory boostedWisherByPoints) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((boostedWisherByPoints)));
  }

  /**
   * @notice Get the length of boostedWisherByPoints.
   */
  function lengthBoostedWisherByPoints(bytes32 poolId, uint256 cycle) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 20;
    }
  }

  /**
   * @notice Get the length of boostedWisherByPoints.
   */
  function _lengthBoostedWisherByPoints(bytes32 poolId, uint256 cycle) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 20;
    }
  }

  /**
   * @notice Get an item of boostedWisherByPoints.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemBoostedWisherByPoints(bytes32 poolId, uint256 cycle, uint256 _index) internal view returns (address) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 20, (_index + 1) * 20);
      return (address(bytes20(_blob)));
    }
  }

  /**
   * @notice Get an item of boostedWisherByPoints.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemBoostedWisherByPoints(
    bytes32 poolId,
    uint256 cycle,
    uint256 _index
  ) internal view returns (address) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 20, (_index + 1) * 20);
      return (address(bytes20(_blob)));
    }
  }

  /**
   * @notice Push an element to boostedWisherByPoints.
   */
  function pushBoostedWisherByPoints(bytes32 poolId, uint256 cycle, address _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to boostedWisherByPoints.
   */
  function _pushBoostedWisherByPoints(bytes32 poolId, uint256 cycle, address _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from boostedWisherByPoints.
   */
  function popBoostedWisherByPoints(bytes32 poolId, uint256 cycle) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 20);
  }

  /**
   * @notice Pop an element from boostedWisherByPoints.
   */
  function _popBoostedWisherByPoints(bytes32 poolId, uint256 cycle) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 20);
  }

  /**
   * @notice Update an element of boostedWisherByPoints at `_index`.
   */
  function updateBoostedWisherByPoints(bytes32 poolId, uint256 cycle, uint256 _index, address _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 20), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of boostedWisherByPoints at `_index`.
   */
  function _updateBoostedWisherByPoints(bytes32 poolId, uint256 cycle, uint256 _index, address _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 20), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get boostedWisherByStar.
   */
  function getBoostedWisherByStar(
    bytes32 poolId,
    uint256 cycle
  ) internal view returns (address[] memory boostedWisherByStar) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_address());
  }

  /**
   * @notice Get boostedWisherByStar.
   */
  function _getBoostedWisherByStar(
    bytes32 poolId,
    uint256 cycle
  ) internal view returns (address[] memory boostedWisherByStar) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_address());
  }

  /**
   * @notice Set boostedWisherByStar.
   */
  function setBoostedWisherByStar(bytes32 poolId, uint256 cycle, address[] memory boostedWisherByStar) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 1, EncodeArray.encode((boostedWisherByStar)));
  }

  /**
   * @notice Set boostedWisherByStar.
   */
  function _setBoostedWisherByStar(bytes32 poolId, uint256 cycle, address[] memory boostedWisherByStar) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    StoreCore.setDynamicField(_tableId, _keyTuple, 1, EncodeArray.encode((boostedWisherByStar)));
  }

  /**
   * @notice Get the length of boostedWisherByStar.
   */
  function lengthBoostedWisherByStar(bytes32 poolId, uint256 cycle) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 20;
    }
  }

  /**
   * @notice Get the length of boostedWisherByStar.
   */
  function _lengthBoostedWisherByStar(bytes32 poolId, uint256 cycle) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 20;
    }
  }

  /**
   * @notice Get an item of boostedWisherByStar.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemBoostedWisherByStar(bytes32 poolId, uint256 cycle, uint256 _index) internal view returns (address) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 20, (_index + 1) * 20);
      return (address(bytes20(_blob)));
    }
  }

  /**
   * @notice Get an item of boostedWisherByStar.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemBoostedWisherByStar(bytes32 poolId, uint256 cycle, uint256 _index) internal view returns (address) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 20, (_index + 1) * 20);
      return (address(bytes20(_blob)));
    }
  }

  /**
   * @notice Push an element to boostedWisherByStar.
   */
  function pushBoostedWisherByStar(bytes32 poolId, uint256 cycle, address _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to boostedWisherByStar.
   */
  function _pushBoostedWisherByStar(bytes32 poolId, uint256 cycle, address _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from boostedWisherByStar.
   */
  function popBoostedWisherByStar(bytes32 poolId, uint256 cycle) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 1, 20);
  }

  /**
   * @notice Pop an element from boostedWisherByStar.
   */
  function _popBoostedWisherByStar(bytes32 poolId, uint256 cycle) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 1, 20);
  }

  /**
   * @notice Update an element of boostedWisherByStar at `_index`.
   */
  function updateBoostedWisherByStar(bytes32 poolId, uint256 cycle, uint256 _index, address _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 20), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of boostedWisherByStar at `_index`.
   */
  function _updateBoostedWisherByStar(bytes32 poolId, uint256 cycle, uint256 _index, address _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 20), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 poolId, uint256 cycle) internal view returns (BoostWisherRecordsData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 poolId, uint256 cycle) internal view returns (BoostWisherRecordsData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 poolId,
    uint256 cycle,
    uint256 amount,
    uint256 amountPoints,
    uint256 amountStar,
    address[] memory boostedWisherByPoints,
    address[] memory boostedWisherByStar
  ) internal {
    bytes memory _staticData = encodeStatic(amount, amountPoints, amountStar);

    EncodedLengths _encodedLengths = encodeLengths(boostedWisherByPoints, boostedWisherByStar);
    bytes memory _dynamicData = encodeDynamic(boostedWisherByPoints, boostedWisherByStar);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 poolId,
    uint256 cycle,
    uint256 amount,
    uint256 amountPoints,
    uint256 amountStar,
    address[] memory boostedWisherByPoints,
    address[] memory boostedWisherByStar
  ) internal {
    bytes memory _staticData = encodeStatic(amount, amountPoints, amountStar);

    EncodedLengths _encodedLengths = encodeLengths(boostedWisherByPoints, boostedWisherByStar);
    bytes memory _dynamicData = encodeDynamic(boostedWisherByPoints, boostedWisherByStar);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 poolId, uint256 cycle, BoostWisherRecordsData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.amount, _table.amountPoints, _table.amountStar);

    EncodedLengths _encodedLengths = encodeLengths(_table.boostedWisherByPoints, _table.boostedWisherByStar);
    bytes memory _dynamicData = encodeDynamic(_table.boostedWisherByPoints, _table.boostedWisherByStar);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 poolId, uint256 cycle, BoostWisherRecordsData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.amount, _table.amountPoints, _table.amountStar);

    EncodedLengths _encodedLengths = encodeLengths(_table.boostedWisherByPoints, _table.boostedWisherByStar);
    bytes memory _dynamicData = encodeDynamic(_table.boostedWisherByPoints, _table.boostedWisherByStar);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (uint256 amount, uint256 amountPoints, uint256 amountStar) {
    amount = (uint256(Bytes.getBytes32(_blob, 0)));

    amountPoints = (uint256(Bytes.getBytes32(_blob, 32)));

    amountStar = (uint256(Bytes.getBytes32(_blob, 64)));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    EncodedLengths _encodedLengths,
    bytes memory _blob
  ) internal pure returns (address[] memory boostedWisherByPoints, address[] memory boostedWisherByStar) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    boostedWisherByPoints = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_address());

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(1);
    }
    boostedWisherByStar = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_address());
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (BoostWisherRecordsData memory _table) {
    (_table.amount, _table.amountPoints, _table.amountStar) = decodeStatic(_staticData);

    (_table.boostedWisherByPoints, _table.boostedWisherByStar) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 poolId, uint256 cycle) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 poolId, uint256 cycle) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(uint256 amount, uint256 amountPoints, uint256 amountStar) internal pure returns (bytes memory) {
    return abi.encodePacked(amount, amountPoints, amountStar);
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(
    address[] memory boostedWisherByPoints,
    address[] memory boostedWisherByStar
  ) internal pure returns (EncodedLengths _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = EncodedLengthsLib.pack(boostedWisherByPoints.length * 20, boostedWisherByStar.length * 20);
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(
    address[] memory boostedWisherByPoints,
    address[] memory boostedWisherByStar
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(EncodeArray.encode((boostedWisherByPoints)), EncodeArray.encode((boostedWisherByStar)));
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 amount,
    uint256 amountPoints,
    uint256 amountStar,
    address[] memory boostedWisherByPoints,
    address[] memory boostedWisherByStar
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(amount, amountPoints, amountStar);

    EncodedLengths _encodedLengths = encodeLengths(boostedWisherByPoints, boostedWisherByStar);
    bytes memory _dynamicData = encodeDynamic(boostedWisherByPoints, boostedWisherByStar);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 poolId, uint256 cycle) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(cycle));

    return _keyTuple;
  }
}

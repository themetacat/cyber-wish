// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct PropBlindBoxData {
  uint256 amount;
  uint256 pointsMin;
  uint256 pointsMax;
  uint256 starProbability;
  bool easterEggProbability;
  string name;
  uint256[] propIds;
}

library PropBlindBox {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "cyberwish", name: "PropBlindBox", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x7462637962657277697368000000000050726f70426c696e64426f7800000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0081050220202020010000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32, uint256)
  Schema constant _keySchema = Schema.wrap(0x004002005f1f0000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256, uint256, uint256, uint256, bool, string, uint256[])
  Schema constant _valueSchema = Schema.wrap(0x008105021f1f1f1f60c581000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](2);
    keyNames[0] = "poolId";
    keyNames[1] = "id";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](7);
    fieldNames[0] = "amount";
    fieldNames[1] = "pointsMin";
    fieldNames[2] = "pointsMax";
    fieldNames[3] = "starProbability";
    fieldNames[4] = "easterEggProbability";
    fieldNames[5] = "name";
    fieldNames[6] = "propIds";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get amount.
   */
  function getAmount(bytes32 poolId, uint256 id) internal view returns (uint256 amount) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get amount.
   */
  function _getAmount(bytes32 poolId, uint256 id) internal view returns (uint256 amount) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set amount.
   */
  function setAmount(bytes32 poolId, uint256 id, uint256 amount) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((amount)), _fieldLayout);
  }

  /**
   * @notice Set amount.
   */
  function _setAmount(bytes32 poolId, uint256 id, uint256 amount) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((amount)), _fieldLayout);
  }

  /**
   * @notice Get pointsMin.
   */
  function getPointsMin(bytes32 poolId, uint256 id) internal view returns (uint256 pointsMin) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get pointsMin.
   */
  function _getPointsMin(bytes32 poolId, uint256 id) internal view returns (uint256 pointsMin) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set pointsMin.
   */
  function setPointsMin(bytes32 poolId, uint256 id, uint256 pointsMin) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((pointsMin)), _fieldLayout);
  }

  /**
   * @notice Set pointsMin.
   */
  function _setPointsMin(bytes32 poolId, uint256 id, uint256 pointsMin) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((pointsMin)), _fieldLayout);
  }

  /**
   * @notice Get pointsMax.
   */
  function getPointsMax(bytes32 poolId, uint256 id) internal view returns (uint256 pointsMax) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get pointsMax.
   */
  function _getPointsMax(bytes32 poolId, uint256 id) internal view returns (uint256 pointsMax) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set pointsMax.
   */
  function setPointsMax(bytes32 poolId, uint256 id, uint256 pointsMax) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((pointsMax)), _fieldLayout);
  }

  /**
   * @notice Set pointsMax.
   */
  function _setPointsMax(bytes32 poolId, uint256 id, uint256 pointsMax) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((pointsMax)), _fieldLayout);
  }

  /**
   * @notice Get starProbability.
   */
  function getStarProbability(bytes32 poolId, uint256 id) internal view returns (uint256 starProbability) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get starProbability.
   */
  function _getStarProbability(bytes32 poolId, uint256 id) internal view returns (uint256 starProbability) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set starProbability.
   */
  function setStarProbability(bytes32 poolId, uint256 id, uint256 starProbability) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((starProbability)), _fieldLayout);
  }

  /**
   * @notice Set starProbability.
   */
  function _setStarProbability(bytes32 poolId, uint256 id, uint256 starProbability) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((starProbability)), _fieldLayout);
  }

  /**
   * @notice Get easterEggProbability.
   */
  function getEasterEggProbability(bytes32 poolId, uint256 id) internal view returns (bool easterEggProbability) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get easterEggProbability.
   */
  function _getEasterEggProbability(bytes32 poolId, uint256 id) internal view returns (bool easterEggProbability) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set easterEggProbability.
   */
  function setEasterEggProbability(bytes32 poolId, uint256 id, bool easterEggProbability) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((easterEggProbability)), _fieldLayout);
  }

  /**
   * @notice Set easterEggProbability.
   */
  function _setEasterEggProbability(bytes32 poolId, uint256 id, bool easterEggProbability) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((easterEggProbability)), _fieldLayout);
  }

  /**
   * @notice Get name.
   */
  function getName(bytes32 poolId, uint256 id) internal view returns (string memory name) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (string(_blob));
  }

  /**
   * @notice Get name.
   */
  function _getName(bytes32 poolId, uint256 id) internal view returns (string memory name) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (string(_blob));
  }

  /**
   * @notice Set name.
   */
  function setName(bytes32 poolId, uint256 id, string memory name) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, bytes((name)));
  }

  /**
   * @notice Set name.
   */
  function _setName(bytes32 poolId, uint256 id, string memory name) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, bytes((name)));
  }

  /**
   * @notice Get the length of name.
   */
  function lengthName(bytes32 poolId, uint256 id) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of name.
   */
  function _lengthName(bytes32 poolId, uint256 id) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get an item of name.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemName(bytes32 poolId, uint256 id, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Get an item of name.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemName(bytes32 poolId, uint256 id, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Push a slice to name.
   */
  function pushName(bytes32 poolId, uint256 id, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /**
   * @notice Push a slice to name.
   */
  function _pushName(bytes32 poolId, uint256 id, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /**
   * @notice Pop a slice from name.
   */
  function popName(bytes32 poolId, uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Pop a slice from name.
   */
  function _popName(bytes32 poolId, uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Update a slice of name at `_index`.
   */
  function updateName(bytes32 poolId, uint256 id, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update a slice of name at `_index`.
   */
  function _updateName(bytes32 poolId, uint256 id, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get propIds.
   */
  function getPropIds(bytes32 poolId, uint256 id) internal view returns (uint256[] memory propIds) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Get propIds.
   */
  function _getPropIds(bytes32 poolId, uint256 id) internal view returns (uint256[] memory propIds) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Set propIds.
   */
  function setPropIds(bytes32 poolId, uint256 id, uint256[] memory propIds) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 1, EncodeArray.encode((propIds)));
  }

  /**
   * @notice Set propIds.
   */
  function _setPropIds(bytes32 poolId, uint256 id, uint256[] memory propIds) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    StoreCore.setDynamicField(_tableId, _keyTuple, 1, EncodeArray.encode((propIds)));
  }

  /**
   * @notice Get the length of propIds.
   */
  function lengthPropIds(bytes32 poolId, uint256 id) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get the length of propIds.
   */
  function _lengthPropIds(bytes32 poolId, uint256 id) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get an item of propIds.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemPropIds(bytes32 poolId, uint256 id, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Get an item of propIds.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemPropIds(bytes32 poolId, uint256 id, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Push an element to propIds.
   */
  function pushPropIds(bytes32 poolId, uint256 id, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to propIds.
   */
  function _pushPropIds(bytes32 poolId, uint256 id, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from propIds.
   */
  function popPropIds(bytes32 poolId, uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 1, 32);
  }

  /**
   * @notice Pop an element from propIds.
   */
  function _popPropIds(bytes32 poolId, uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 1, 32);
  }

  /**
   * @notice Update an element of propIds at `_index`.
   */
  function updatePropIds(bytes32 poolId, uint256 id, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of propIds at `_index`.
   */
  function _updatePropIds(bytes32 poolId, uint256 id, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 poolId, uint256 id) internal view returns (PropBlindBoxData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 poolId, uint256 id) internal view returns (PropBlindBoxData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 poolId,
    uint256 id,
    uint256 amount,
    uint256 pointsMin,
    uint256 pointsMax,
    uint256 starProbability,
    bool easterEggProbability,
    string memory name,
    uint256[] memory propIds
  ) internal {
    bytes memory _staticData = encodeStatic(amount, pointsMin, pointsMax, starProbability, easterEggProbability);

    EncodedLengths _encodedLengths = encodeLengths(name, propIds);
    bytes memory _dynamicData = encodeDynamic(name, propIds);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 poolId,
    uint256 id,
    uint256 amount,
    uint256 pointsMin,
    uint256 pointsMax,
    uint256 starProbability,
    bool easterEggProbability,
    string memory name,
    uint256[] memory propIds
  ) internal {
    bytes memory _staticData = encodeStatic(amount, pointsMin, pointsMax, starProbability, easterEggProbability);

    EncodedLengths _encodedLengths = encodeLengths(name, propIds);
    bytes memory _dynamicData = encodeDynamic(name, propIds);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 poolId, uint256 id, PropBlindBoxData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.amount,
      _table.pointsMin,
      _table.pointsMax,
      _table.starProbability,
      _table.easterEggProbability
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.name, _table.propIds);
    bytes memory _dynamicData = encodeDynamic(_table.name, _table.propIds);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 poolId, uint256 id, PropBlindBoxData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.amount,
      _table.pointsMin,
      _table.pointsMax,
      _table.starProbability,
      _table.easterEggProbability
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.name, _table.propIds);
    bytes memory _dynamicData = encodeDynamic(_table.name, _table.propIds);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (uint256 amount, uint256 pointsMin, uint256 pointsMax, uint256 starProbability, bool easterEggProbability)
  {
    amount = (uint256(Bytes.getBytes32(_blob, 0)));

    pointsMin = (uint256(Bytes.getBytes32(_blob, 32)));

    pointsMax = (uint256(Bytes.getBytes32(_blob, 64)));

    starProbability = (uint256(Bytes.getBytes32(_blob, 96)));

    easterEggProbability = (_toBool(uint8(Bytes.getBytes1(_blob, 128))));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    EncodedLengths _encodedLengths,
    bytes memory _blob
  ) internal pure returns (string memory name, uint256[] memory propIds) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    name = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(1);
    }
    propIds = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint256());
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (PropBlindBoxData memory _table) {
    (
      _table.amount,
      _table.pointsMin,
      _table.pointsMax,
      _table.starProbability,
      _table.easterEggProbability
    ) = decodeStatic(_staticData);

    (_table.name, _table.propIds) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 poolId, uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 poolId, uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint256 amount,
    uint256 pointsMin,
    uint256 pointsMax,
    uint256 starProbability,
    bool easterEggProbability
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(amount, pointsMin, pointsMax, starProbability, easterEggProbability);
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(
    string memory name,
    uint256[] memory propIds
  ) internal pure returns (EncodedLengths _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = EncodedLengthsLib.pack(bytes(name).length, propIds.length * 32);
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(string memory name, uint256[] memory propIds) internal pure returns (bytes memory) {
    return abi.encodePacked(bytes((name)), EncodeArray.encode((propIds)));
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 amount,
    uint256 pointsMin,
    uint256 pointsMax,
    uint256 starProbability,
    bool easterEggProbability,
    string memory name,
    uint256[] memory propIds
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(amount, pointsMin, pointsMax, starProbability, easterEggProbability);

    EncodedLengths _encodedLengths = encodeLengths(name, propIds);
    bytes memory _dynamicData = encodeDynamic(name, propIds);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 poolId, uint256 id) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(id));

    return _keyTuple;
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}

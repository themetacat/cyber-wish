// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct WisherTemporaryRecordsData {
  uint256 pointsWishIndex;
  uint256 starWishIndex;
  uint256 pointsLastCycle;
  uint256 starLastCycle;
  uint256 wishCount;
  uint256 points;
}

library WisherTemporaryRecords {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "cyberwish", name: "WisherTemporaryR", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x7462637962657277697368000000000057697368657254656d706f7261727952);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x00c0060020202020202000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32, address)
  Schema constant _keySchema = Schema.wrap(0x003402005f610000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256, uint256, uint256, uint256, uint256, uint256)
  Schema constant _valueSchema = Schema.wrap(0x00c006001f1f1f1f1f1f00000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](2);
    keyNames[0] = "poolId";
    keyNames[1] = "wisher";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](6);
    fieldNames[0] = "pointsWishIndex";
    fieldNames[1] = "starWishIndex";
    fieldNames[2] = "pointsLastCycle";
    fieldNames[3] = "starLastCycle";
    fieldNames[4] = "wishCount";
    fieldNames[5] = "points";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get pointsWishIndex.
   */
  function getPointsWishIndex(bytes32 poolId, address wisher) internal view returns (uint256 pointsWishIndex) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(uint160(wisher)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get pointsWishIndex.
   */
  function _getPointsWishIndex(bytes32 poolId, address wisher) internal view returns (uint256 pointsWishIndex) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(uint160(wisher)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set pointsWishIndex.
   */
  function setPointsWishIndex(bytes32 poolId, address wisher, uint256 pointsWishIndex) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(uint160(wisher)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((pointsWishIndex)), _fieldLayout);
  }

  /**
   * @notice Set pointsWishIndex.
   */
  function _setPointsWishIndex(bytes32 poolId, address wisher, uint256 pointsWishIndex) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(uint160(wisher)));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((pointsWishIndex)), _fieldLayout);
  }

  /**
   * @notice Get starWishIndex.
   */
  function getStarWishIndex(bytes32 poolId, address wisher) internal view returns (uint256 starWishIndex) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(uint160(wisher)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get starWishIndex.
   */
  function _getStarWishIndex(bytes32 poolId, address wisher) internal view returns (uint256 starWishIndex) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(uint160(wisher)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set starWishIndex.
   */
  function setStarWishIndex(bytes32 poolId, address wisher, uint256 starWishIndex) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(uint160(wisher)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((starWishIndex)), _fieldLayout);
  }

  /**
   * @notice Set starWishIndex.
   */
  function _setStarWishIndex(bytes32 poolId, address wisher, uint256 starWishIndex) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(uint160(wisher)));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((starWishIndex)), _fieldLayout);
  }

  /**
   * @notice Get pointsLastCycle.
   */
  function getPointsLastCycle(bytes32 poolId, address wisher) internal view returns (uint256 pointsLastCycle) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(uint160(wisher)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get pointsLastCycle.
   */
  function _getPointsLastCycle(bytes32 poolId, address wisher) internal view returns (uint256 pointsLastCycle) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(uint160(wisher)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set pointsLastCycle.
   */
  function setPointsLastCycle(bytes32 poolId, address wisher, uint256 pointsLastCycle) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(uint160(wisher)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((pointsLastCycle)), _fieldLayout);
  }

  /**
   * @notice Set pointsLastCycle.
   */
  function _setPointsLastCycle(bytes32 poolId, address wisher, uint256 pointsLastCycle) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(uint160(wisher)));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((pointsLastCycle)), _fieldLayout);
  }

  /**
   * @notice Get starLastCycle.
   */
  function getStarLastCycle(bytes32 poolId, address wisher) internal view returns (uint256 starLastCycle) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(uint160(wisher)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get starLastCycle.
   */
  function _getStarLastCycle(bytes32 poolId, address wisher) internal view returns (uint256 starLastCycle) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(uint160(wisher)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set starLastCycle.
   */
  function setStarLastCycle(bytes32 poolId, address wisher, uint256 starLastCycle) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(uint160(wisher)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((starLastCycle)), _fieldLayout);
  }

  /**
   * @notice Set starLastCycle.
   */
  function _setStarLastCycle(bytes32 poolId, address wisher, uint256 starLastCycle) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(uint160(wisher)));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((starLastCycle)), _fieldLayout);
  }

  /**
   * @notice Get wishCount.
   */
  function getWishCount(bytes32 poolId, address wisher) internal view returns (uint256 wishCount) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(uint160(wisher)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get wishCount.
   */
  function _getWishCount(bytes32 poolId, address wisher) internal view returns (uint256 wishCount) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(uint160(wisher)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set wishCount.
   */
  function setWishCount(bytes32 poolId, address wisher, uint256 wishCount) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(uint160(wisher)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((wishCount)), _fieldLayout);
  }

  /**
   * @notice Set wishCount.
   */
  function _setWishCount(bytes32 poolId, address wisher, uint256 wishCount) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(uint160(wisher)));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((wishCount)), _fieldLayout);
  }

  /**
   * @notice Get points.
   */
  function getPoints(bytes32 poolId, address wisher) internal view returns (uint256 points) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(uint160(wisher)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get points.
   */
  function _getPoints(bytes32 poolId, address wisher) internal view returns (uint256 points) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(uint160(wisher)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set points.
   */
  function setPoints(bytes32 poolId, address wisher, uint256 points) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(uint160(wisher)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((points)), _fieldLayout);
  }

  /**
   * @notice Set points.
   */
  function _setPoints(bytes32 poolId, address wisher, uint256 points) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(uint160(wisher)));

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((points)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 poolId, address wisher) internal view returns (WisherTemporaryRecordsData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(uint160(wisher)));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 poolId, address wisher) internal view returns (WisherTemporaryRecordsData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(uint160(wisher)));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 poolId,
    address wisher,
    uint256 pointsWishIndex,
    uint256 starWishIndex,
    uint256 pointsLastCycle,
    uint256 starLastCycle,
    uint256 wishCount,
    uint256 points
  ) internal {
    bytes memory _staticData = encodeStatic(
      pointsWishIndex,
      starWishIndex,
      pointsLastCycle,
      starLastCycle,
      wishCount,
      points
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(uint160(wisher)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 poolId,
    address wisher,
    uint256 pointsWishIndex,
    uint256 starWishIndex,
    uint256 pointsLastCycle,
    uint256 starLastCycle,
    uint256 wishCount,
    uint256 points
  ) internal {
    bytes memory _staticData = encodeStatic(
      pointsWishIndex,
      starWishIndex,
      pointsLastCycle,
      starLastCycle,
      wishCount,
      points
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(uint160(wisher)));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 poolId, address wisher, WisherTemporaryRecordsData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.pointsWishIndex,
      _table.starWishIndex,
      _table.pointsLastCycle,
      _table.starLastCycle,
      _table.wishCount,
      _table.points
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(uint160(wisher)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 poolId, address wisher, WisherTemporaryRecordsData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.pointsWishIndex,
      _table.starWishIndex,
      _table.pointsLastCycle,
      _table.starLastCycle,
      _table.wishCount,
      _table.points
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(uint160(wisher)));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      uint256 pointsWishIndex,
      uint256 starWishIndex,
      uint256 pointsLastCycle,
      uint256 starLastCycle,
      uint256 wishCount,
      uint256 points
    )
  {
    pointsWishIndex = (uint256(Bytes.getBytes32(_blob, 0)));

    starWishIndex = (uint256(Bytes.getBytes32(_blob, 32)));

    pointsLastCycle = (uint256(Bytes.getBytes32(_blob, 64)));

    starLastCycle = (uint256(Bytes.getBytes32(_blob, 96)));

    wishCount = (uint256(Bytes.getBytes32(_blob, 128)));

    points = (uint256(Bytes.getBytes32(_blob, 160)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (WisherTemporaryRecordsData memory _table) {
    (
      _table.pointsWishIndex,
      _table.starWishIndex,
      _table.pointsLastCycle,
      _table.starLastCycle,
      _table.wishCount,
      _table.points
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 poolId, address wisher) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(uint160(wisher)));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 poolId, address wisher) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(uint160(wisher)));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint256 pointsWishIndex,
    uint256 starWishIndex,
    uint256 pointsLastCycle,
    uint256 starLastCycle,
    uint256 wishCount,
    uint256 points
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(pointsWishIndex, starWishIndex, pointsLastCycle, starLastCycle, wishCount, points);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 pointsWishIndex,
    uint256 starWishIndex,
    uint256 pointsLastCycle,
    uint256 starLastCycle,
    uint256 wishCount,
    uint256 points
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      pointsWishIndex,
      starWishIndex,
      pointsLastCycle,
      starLastCycle,
      wishCount,
      points
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 poolId, address wisher) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = poolId;
    _keyTuple[1] = bytes32(uint256(uint160(wisher)));

    return _keyTuple;
  }
}
